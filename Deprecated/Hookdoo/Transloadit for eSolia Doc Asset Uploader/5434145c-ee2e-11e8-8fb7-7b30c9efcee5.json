{
  "hookName": "Transloadit for eSolia Doc Asset Uploader",
  "environmentVariables": {
    "INPUT": {
      "RAW_REQ_VAL": {
        "SOURCE": "entirePayload"
      }
    },
    "DBFLEXRESTTOKEN": {
      "CONST": {
        "TYPE": "string",
        "VALUE": "18224B31CECC4DA2991789031C8A497C"
      }
    },
    "TAPIAUTH": {
      "CONST": {
        "TYPE": "string",
        "VALUE": "412e39431dd80dd8a24bb6c5ca0907a8195c63ad"
      }
    }
  },
  "triggerRule": {
    "==": {
      "LEXPR": {
        "REQ_VAL": {
          "TYPE": "string",
          "SOURCE": "singleQueryValue",
          "VALUEOF": "account_id"
        }
      },
      "REXPR": {
        "CONST": {
          "TYPE": "string",
          "VALUE": "f30c4420eaf311e8adf45d9a4689d142"
        }
      }
    }
  },
  "isEnabled": true,
  "scriptCode": "#!/bin/sh\n# Run by hookdoo and INPUT var is created by the script in the hook\n# Use ${DBFLEXRESTTOKEN} in dbflex load statement\n# Use ${TAPIAUTH} in openssl hmac statement for sig check\nJQBIN=\"/home/rcogley/bin/jq\"\nRMBIN=\"/usr/bin/rm\"\nAWKBIN=\"/usr/bin/awk\"\nPHPBIN=\"/usr/local/bin/php\"\nPERLBIN=\"/usr/bin/perl\"\nOPENSSLBIN=\"/usr/bin/openssl\"\nCMPBIN=\"/usr/bin/cmp\"\nWORKINGDIR=\"/home/rcogley/webapps/hook_transloadit_esdocup\"\n\ncd ${WORKINGDIR}\n${RMBIN} -rf *\n\necho ${INPUT} > ${WORKINGDIR}/tassy-payload.out\ncat ${WORKINGDIR}/tassy-payload.out | ${PHPBIN} -R 'echo urldecode($argn).\"\\n\";' > ${WORKINGDIR}/tassy-payload-decoded.out\ncat ${WORKINGDIR}/tassy-payload-decoded.out | ${AWKBIN} -F'&signature=' '{print $2}' > ${WORKINGDIR}/tassy-signature.out\ncat ${WORKINGDIR}/tassy-payload-decoded.out | ${AWKBIN} -F'&signature=' '{print $1}' > ${WORKINGDIR}/tassy-payload-decoded-pre1.out\ncat ${WORKINGDIR}/tassy-payload-decoded-pre1.out | ${AWKBIN} -F'transloadit=' '{print $2}' > ${WORKINGDIR}/tassy-result-pre1.out\n${PERLBIN} -pe 'chomp if eof' ${WORKINGDIR}/tassy-result-pre1.out | ${OPENSSLBIN} sha1 -hmac \"${TAPIAUTH}\" | ${AWKBIN} '{print $2}' > ${WORKINGDIR}/tassy-signature-local-confirm.out\ncat ${WORKINGDIR}/tassy-result-pre1.out | ${JQBIN} '.' > ${WORKINGDIR}/tassy-result.json\n\nTEMPLATEID=$(cat tassy-result.json | ${JQBIN} --compact-output --raw-output '.template_id')\nASSEMBLYID=$(cat tassy-result.json | ${JQBIN} --compact-output --raw-output '.assembly_id')\nASSEMBLYTS=$(cat tassy-result.json | ${JQBIN} --compact-output --raw-output '.last_job_completed|gsub(\" GMT\"; \"Z\")|gsub(\" \"; \"T\")|gsub(\"/\"; \"-\")')\n\ncat ${WORKINGDIR}/tassy-result.json |  ${JQBIN} --raw-output --arg tid \"${TEMPLATEID}\" --arg aid \"${ASSEMBLYID}\" --arg ats \"${ASSEMBLYTS}\" '[.uploads,.results.compress_image | .[] | {\"Template Id\": $tid, \"Assembly Id\": $aid, \"Assembly TS\": $ats, \"Original Id\": .original_id, \"File Size\": .size, \"File Width\": .meta.width, \"File Last Modified\": (.meta.date_file_modified|gsub(\" GMT\"; \"Z\")|gsub(\" \"; \"T\")|gsub(\"/\"; \"-\")), \"File URL\": .ssl_url}]' > ${WORKINGDIR}/tassy-dbflex-ready.json\n\n# Compare sigs and if ok then POST it to PROdb\nif ${CMPBIN} ${WORKINGDIR}/tassy-signature.out ${WORKINGDIR}/tassy-signature-local-confirm.out >/dev/null 2>&1\nthen\ncurl -X \"POST\" \"https://pro.dbflex.net/secure/api/v2/15331/${DBFLEXRESTTOKEN}/Upload%20Link/create.json\" \\\n     -H 'Content-Type: application/json' \\\n     -d @${WORKINGDIR}/tassy-dbflex-ready.json\nfi",
  "concurrencyStrategy": 0
}